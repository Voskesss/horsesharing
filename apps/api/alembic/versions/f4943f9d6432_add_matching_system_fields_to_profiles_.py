"""Add matching system fields to profiles and horses

Revision ID: f4943f9d6432
Revises: 
Create Date: 2025-09-05 14:17:52.988150

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'f4943f9d6432'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_bookings_id', table_name='bookings')
    op.drop_table('bookings')
    op.drop_index('ix_stables_id', table_name='stables')
    op.drop_index('ix_stables_name', table_name='stables')
    op.drop_table('stables')
    op.add_column('horses', sa.Column('weight_capacity_kg', sa.Integer(), nullable=True))
    op.add_column('horses', sa.Column('rider_height_min_cm', sa.Integer(), nullable=True))
    op.add_column('horses', sa.Column('rider_height_max_cm', sa.Integer(), nullable=True))
    op.add_column('horses', sa.Column('energy_level', sa.Enum('LOW', 'MEDIUM', 'HIGH', name='energylevel'), nullable=False))
    op.add_column('horses', sa.Column('temperament', sa.JSON(), nullable=True))
    op.add_column('horses', sa.Column('triggers', sa.JSON(), nullable=True))
    op.add_column('horses', sa.Column('enjoys', sa.JSON(), nullable=True))
    op.add_column('horses', sa.Column('suitable_for_levels', sa.JSON(), nullable=True))
    op.add_column('horses', sa.Column('not_suitable_for', sa.JSON(), nullable=True))
    op.add_column('horses', sa.Column('current_training_level', sa.JSON(), nullable=True))
    op.add_column('horses', sa.Column('max_jump_height_cm', sa.Integer(), nullable=True))
    op.add_column('horses', sa.Column('health_restrictions', sa.JSON(), nullable=True))
    op.add_column('horses', sa.Column('medication_schedule', sa.JSON(), nullable=True))
    op.add_column('horses', sa.Column('farrier_schedule', sa.String(), nullable=True))
    op.add_column('horses', sa.Column('physio_schedule', sa.String(), nullable=True))
    op.add_column('horses', sa.Column('photos', sa.JSON(), nullable=True))
    op.add_column('horses', sa.Column('video_url', sa.String(), nullable=True))
    op.drop_column('horses', 'max_jump_cm')
    op.drop_column('horses', 'likes')
    op.drop_column('horses', 'health_notes')
    op.drop_column('horses', 'temperament_tags')
    op.drop_column('horses', 'not_for_beginners')
    op.drop_column('horses', 'energy')
    op.add_column('owner_profiles', sa.Column('first_name', sa.String(), nullable=True))
    op.add_column('owner_profiles', sa.Column('last_name', sa.String(), nullable=True))
    op.add_column('owner_profiles', sa.Column('phone', sa.String(), nullable=True))
    op.add_column('owner_profiles', sa.Column('postcode', sa.String(), nullable=True))
    op.add_column('owner_profiles', sa.Column('visible_radius_km', sa.Integer(), nullable=True))
    op.add_column('owner_profiles', sa.Column('parking_available', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('public_transport_access', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('available_days', sa.JSON(), nullable=True))
    op.add_column('owner_profiles', sa.Column('available_time_blocks', sa.JSON(), nullable=True))
    op.add_column('owner_profiles', sa.Column('start_date', sa.String(), nullable=True))
    op.add_column('owner_profiles', sa.Column('trial_period_weeks', sa.Integer(), nullable=True))
    op.add_column('owner_profiles', sa.Column('arrangement_duration', sa.String(), nullable=True))
    op.add_column('owner_profiles', sa.Column('contribution_min_euro', sa.Integer(), nullable=True))
    op.add_column('owner_profiles', sa.Column('contribution_type', sa.String(), nullable=True))
    op.add_column('owner_profiles', sa.Column('deposit_required', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('deposit_amount_euro', sa.Integer(), nullable=True))
    op.add_column('owner_profiles', sa.Column('min_age', sa.Integer(), nullable=True))
    op.add_column('owner_profiles', sa.Column('max_age', sa.Integer(), nullable=True))
    op.add_column('owner_profiles', sa.Column('parental_consent_required', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('min_experience_years', sa.Integer(), nullable=True))
    op.add_column('owner_profiles', sa.Column('required_certifications', sa.JSON(), nullable=True))
    op.add_column('owner_profiles', sa.Column('required_tasks', sa.JSON(), nullable=True))
    op.add_column('owner_profiles', sa.Column('optional_tasks', sa.JSON(), nullable=True))
    op.add_column('owner_profiles', sa.Column('task_frequency', sa.JSON(), nullable=True))
    op.add_column('owner_profiles', sa.Column('instruction_available', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('instruction_required', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('supervision_required', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('instructor_present', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('helmet_required', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('safety_equipment_required', sa.JSON(), nullable=True))
    op.add_column('owner_profiles', sa.Column('id_verification_required', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('contract_required', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('rider_insurance_required', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('liability_insurance_available', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('business_insurance', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('bit_policy', sa.String(), nullable=True))
    op.add_column('owner_profiles', sa.Column('spur_policy', sa.String(), nullable=True))
    op.add_column('owner_profiles', sa.Column('auxiliary_reins_policy', sa.String(), nullable=True))
    op.add_column('owner_profiles', sa.Column('bareback_allowed', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('indoor_arena', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('outdoor_arena', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('arena_lighting', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('lunging_circle', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('walker_available', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('outdoor_trails', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('beach_access', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('forest_trails', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('road_riding', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('trailer_available', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('stable_rules', sa.JSON(), nullable=True))
    op.add_column('owner_profiles', sa.Column('no_gos', sa.JSON(), nullable=True))
    op.add_column('owner_profiles', sa.Column('stable_photos', sa.JSON(), nullable=True))
    op.add_column('owner_profiles', sa.Column('video_intro_url', sa.String(), nullable=True))
    op.add_column('owner_profiles', sa.Column('is_complete', sa.Boolean(), nullable=True))
    op.add_column('owner_profiles', sa.Column('profile_version', sa.String(), nullable=True))
    op.add_column('owner_profiles', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.add_column('owner_profiles', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.drop_column('owner_profiles', 'stable_name')
    op.drop_column('owner_profiles', 'phone_public')
    op.drop_column('owner_profiles', 'rules_text')
    op.add_column('rider_profiles', sa.Column('first_name', sa.String(), nullable=True))
    op.add_column('rider_profiles', sa.Column('last_name', sa.String(), nullable=True))
    op.add_column('rider_profiles', sa.Column('phone', sa.String(), nullable=True))
    op.add_column('rider_profiles', sa.Column('date_of_birth', sa.String(), nullable=True))
    op.add_column('rider_profiles', sa.Column('postcode', sa.String(), nullable=True))
    op.add_column('rider_profiles', sa.Column('max_travel_distance_km', sa.Integer(), nullable=True))
    op.add_column('rider_profiles', sa.Column('transport_options', sa.JSON(), nullable=True))
    op.add_column('rider_profiles', sa.Column('available_days', sa.JSON(), nullable=True))
    op.add_column('rider_profiles', sa.Column('available_time_blocks', sa.JSON(), nullable=True))
    op.add_column('rider_profiles', sa.Column('session_duration_min', sa.Integer(), nullable=True))
    op.add_column('rider_profiles', sa.Column('session_duration_max', sa.Integer(), nullable=True))
    op.add_column('rider_profiles', sa.Column('start_date', sa.String(), nullable=True))
    op.add_column('rider_profiles', sa.Column('arrangement_duration', sa.String(), nullable=True))
    op.add_column('rider_profiles', sa.Column('budget_min_euro', sa.Integer(), nullable=True))
    op.add_column('rider_profiles', sa.Column('budget_max_euro', sa.Integer(), nullable=True))
    op.add_column('rider_profiles', sa.Column('budget_type', sa.String(), nullable=True))
    op.add_column('rider_profiles', sa.Column('experience_years', sa.Integer(), nullable=True))
    op.add_column('rider_profiles', sa.Column('certification_level', sa.String(), nullable=True))
    op.add_column('rider_profiles', sa.Column('previous_instructors', sa.JSON(), nullable=True))
    op.add_column('rider_profiles', sa.Column('comfort_levels', sa.JSON(), nullable=True))
    op.add_column('rider_profiles', sa.Column('riding_goals', sa.JSON(), nullable=True))
    op.add_column('rider_profiles', sa.Column('discipline_preferences', sa.JSON(), nullable=True))
    op.add_column('rider_profiles', sa.Column('personality_style', sa.JSON(), nullable=True))
    op.add_column('rider_profiles', sa.Column('willing_tasks', sa.JSON(), nullable=True))
    op.add_column('rider_profiles', sa.Column('task_frequency', sa.JSON(), nullable=True))
    op.add_column('rider_profiles', sa.Column('material_preferences', sa.JSON(), nullable=True))
    op.add_column('rider_profiles', sa.Column('health_restrictions', sa.JSON(), nullable=True))
    op.add_column('rider_profiles', sa.Column('insurance_coverage', sa.Boolean(), nullable=True))
    op.add_column('rider_profiles', sa.Column('no_gos', sa.JSON(), nullable=True))
    op.add_column('rider_profiles', sa.Column('photos', sa.JSON(), nullable=True))
    op.add_column('rider_profiles', sa.Column('video_intro_url', sa.String(), nullable=True))
    op.add_column('rider_profiles', sa.Column('is_complete', sa.Boolean(), nullable=True))
    op.add_column('rider_profiles', sa.Column('profile_version', sa.String(), nullable=True))
    op.add_column('rider_profiles', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.add_column('rider_profiles', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.drop_column('rider_profiles', 'tasks_ready')
    op.drop_column('rider_profiles', 'max_distance_km')
    op.drop_column('rider_profiles', 'prefers_bitless')
    op.drop_column('rider_profiles', 'bio')
    op.drop_column('rider_profiles', 'budget_min')
    op.drop_column('rider_profiles', 'guardian_consent')
    op.drop_column('rider_profiles', 'budget_max')
    op.drop_column('rider_profiles', 'availability')
    op.drop_column('rider_profiles', 'name')
    op.drop_column('rider_profiles', 'can_trailer')
    op.drop_column('rider_profiles', 'guardian_email')
    op.drop_column('rider_profiles', 'style_tags')
    op.drop_column('rider_profiles', 'guardian_name')
    op.drop_column('rider_profiles', 'guardian_ok')
    op.drop_column('rider_profiles', 'level')
    op.drop_column('rider_profiles', 'years_exp')
    op.drop_column('rider_profiles', 'photo')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('rider_profiles', sa.Column('photo', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('rider_profiles', sa.Column('years_exp', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('rider_profiles', sa.Column('level', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('rider_profiles', sa.Column('guardian_ok', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('rider_profiles', sa.Column('guardian_name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('rider_profiles', sa.Column('style_tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('rider_profiles', sa.Column('guardian_email', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('rider_profiles', sa.Column('can_trailer', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('rider_profiles', sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('rider_profiles', sa.Column('availability', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('rider_profiles', sa.Column('budget_max', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('rider_profiles', sa.Column('guardian_consent', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('rider_profiles', sa.Column('budget_min', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('rider_profiles', sa.Column('bio', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('rider_profiles', sa.Column('prefers_bitless', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('rider_profiles', sa.Column('max_distance_km', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('rider_profiles', sa.Column('tasks_ready', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_column('rider_profiles', 'updated_at')
    op.drop_column('rider_profiles', 'created_at')
    op.drop_column('rider_profiles', 'profile_version')
    op.drop_column('rider_profiles', 'is_complete')
    op.drop_column('rider_profiles', 'video_intro_url')
    op.drop_column('rider_profiles', 'photos')
    op.drop_column('rider_profiles', 'no_gos')
    op.drop_column('rider_profiles', 'insurance_coverage')
    op.drop_column('rider_profiles', 'health_restrictions')
    op.drop_column('rider_profiles', 'material_preferences')
    op.drop_column('rider_profiles', 'task_frequency')
    op.drop_column('rider_profiles', 'willing_tasks')
    op.drop_column('rider_profiles', 'personality_style')
    op.drop_column('rider_profiles', 'discipline_preferences')
    op.drop_column('rider_profiles', 'riding_goals')
    op.drop_column('rider_profiles', 'comfort_levels')
    op.drop_column('rider_profiles', 'previous_instructors')
    op.drop_column('rider_profiles', 'certification_level')
    op.drop_column('rider_profiles', 'experience_years')
    op.drop_column('rider_profiles', 'budget_type')
    op.drop_column('rider_profiles', 'budget_max_euro')
    op.drop_column('rider_profiles', 'budget_min_euro')
    op.drop_column('rider_profiles', 'arrangement_duration')
    op.drop_column('rider_profiles', 'start_date')
    op.drop_column('rider_profiles', 'session_duration_max')
    op.drop_column('rider_profiles', 'session_duration_min')
    op.drop_column('rider_profiles', 'available_time_blocks')
    op.drop_column('rider_profiles', 'available_days')
    op.drop_column('rider_profiles', 'transport_options')
    op.drop_column('rider_profiles', 'max_travel_distance_km')
    op.drop_column('rider_profiles', 'postcode')
    op.drop_column('rider_profiles', 'date_of_birth')
    op.drop_column('rider_profiles', 'phone')
    op.drop_column('rider_profiles', 'last_name')
    op.drop_column('rider_profiles', 'first_name')
    op.add_column('owner_profiles', sa.Column('rules_text', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('owner_profiles', sa.Column('phone_public', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('owner_profiles', sa.Column('stable_name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_column('owner_profiles', 'updated_at')
    op.drop_column('owner_profiles', 'created_at')
    op.drop_column('owner_profiles', 'profile_version')
    op.drop_column('owner_profiles', 'is_complete')
    op.drop_column('owner_profiles', 'video_intro_url')
    op.drop_column('owner_profiles', 'stable_photos')
    op.drop_column('owner_profiles', 'no_gos')
    op.drop_column('owner_profiles', 'stable_rules')
    op.drop_column('owner_profiles', 'trailer_available')
    op.drop_column('owner_profiles', 'road_riding')
    op.drop_column('owner_profiles', 'forest_trails')
    op.drop_column('owner_profiles', 'beach_access')
    op.drop_column('owner_profiles', 'outdoor_trails')
    op.drop_column('owner_profiles', 'walker_available')
    op.drop_column('owner_profiles', 'lunging_circle')
    op.drop_column('owner_profiles', 'arena_lighting')
    op.drop_column('owner_profiles', 'outdoor_arena')
    op.drop_column('owner_profiles', 'indoor_arena')
    op.drop_column('owner_profiles', 'bareback_allowed')
    op.drop_column('owner_profiles', 'auxiliary_reins_policy')
    op.drop_column('owner_profiles', 'spur_policy')
    op.drop_column('owner_profiles', 'bit_policy')
    op.drop_column('owner_profiles', 'business_insurance')
    op.drop_column('owner_profiles', 'liability_insurance_available')
    op.drop_column('owner_profiles', 'rider_insurance_required')
    op.drop_column('owner_profiles', 'contract_required')
    op.drop_column('owner_profiles', 'id_verification_required')
    op.drop_column('owner_profiles', 'safety_equipment_required')
    op.drop_column('owner_profiles', 'helmet_required')
    op.drop_column('owner_profiles', 'instructor_present')
    op.drop_column('owner_profiles', 'supervision_required')
    op.drop_column('owner_profiles', 'instruction_required')
    op.drop_column('owner_profiles', 'instruction_available')
    op.drop_column('owner_profiles', 'task_frequency')
    op.drop_column('owner_profiles', 'optional_tasks')
    op.drop_column('owner_profiles', 'required_tasks')
    op.drop_column('owner_profiles', 'required_certifications')
    op.drop_column('owner_profiles', 'min_experience_years')
    op.drop_column('owner_profiles', 'parental_consent_required')
    op.drop_column('owner_profiles', 'max_age')
    op.drop_column('owner_profiles', 'min_age')
    op.drop_column('owner_profiles', 'deposit_amount_euro')
    op.drop_column('owner_profiles', 'deposit_required')
    op.drop_column('owner_profiles', 'contribution_type')
    op.drop_column('owner_profiles', 'contribution_min_euro')
    op.drop_column('owner_profiles', 'arrangement_duration')
    op.drop_column('owner_profiles', 'trial_period_weeks')
    op.drop_column('owner_profiles', 'start_date')
    op.drop_column('owner_profiles', 'available_time_blocks')
    op.drop_column('owner_profiles', 'available_days')
    op.drop_column('owner_profiles', 'public_transport_access')
    op.drop_column('owner_profiles', 'parking_available')
    op.drop_column('owner_profiles', 'visible_radius_km')
    op.drop_column('owner_profiles', 'postcode')
    op.drop_column('owner_profiles', 'phone')
    op.drop_column('owner_profiles', 'last_name')
    op.drop_column('owner_profiles', 'first_name')
    op.add_column('horses', sa.Column('energy', postgresql.ENUM('LOW', 'MEDIUM', 'HIGH', name='energylevel'), autoincrement=False, nullable=False))
    op.add_column('horses', sa.Column('not_for_beginners', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('horses', sa.Column('temperament_tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('horses', sa.Column('health_notes', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('horses', sa.Column('likes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('horses', sa.Column('max_jump_cm', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_column('horses', 'video_url')
    op.drop_column('horses', 'photos')
    op.drop_column('horses', 'physio_schedule')
    op.drop_column('horses', 'farrier_schedule')
    op.drop_column('horses', 'medication_schedule')
    op.drop_column('horses', 'health_restrictions')
    op.drop_column('horses', 'max_jump_height_cm')
    op.drop_column('horses', 'current_training_level')
    op.drop_column('horses', 'not_suitable_for')
    op.drop_column('horses', 'suitable_for_levels')
    op.drop_column('horses', 'enjoys')
    op.drop_column('horses', 'triggers')
    op.drop_column('horses', 'temperament')
    op.drop_column('horses', 'energy_level')
    op.drop_column('horses', 'rider_height_max_cm')
    op.drop_column('horses', 'rider_height_min_cm')
    op.drop_column('horses', 'weight_capacity_kg')
    op.create_table('stables',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('website', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('city', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('postal_code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('country', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('lat', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('lng', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('facilities', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('capacity', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('photos', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name='stables_owner_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='stables_pkey')
    )
    op.create_index('ix_stables_name', 'stables', ['name'], unique=False)
    op.create_index('ix_stables_id', 'stables', ['id'], unique=False)
    op.create_table('bookings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('rider_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('horse_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('start_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('duration_hours', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('price_per_hour', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_price', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'CONFIRMED', 'CANCELLED', 'COMPLETED', name='bookingstatus'), autoincrement=False, nullable=True),
    sa.Column('rider_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('owner_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('cancellation_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('stripe_payment_intent_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_paid', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('payment_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['horse_id'], ['horses.id'], name='bookings_horse_id_fkey'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name='bookings_owner_id_fkey'),
    sa.ForeignKeyConstraint(['rider_id'], ['users.id'], name='bookings_rider_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='bookings_pkey')
    )
    op.create_index('ix_bookings_id', 'bookings', ['id'], unique=False)
    # ### end Alembic commands ###
